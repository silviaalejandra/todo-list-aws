pipeline {
    agent any

    parameters {
        choice choices: ['staging', 'production'], name: 'ENVIRONMENT'
    }
    
    stages {
    
        stage('Control Environment'){
        when {
            not {
                branch 'master'
            }
        }
            steps{
                script {
                    if ( params.ENVIRONMENT == 'production' ) {
                        error "No cumple las condiciones para implementar en ${ENVIRONMENT} desde una rama de feature/dev"
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }
        
        stage('SetUp'){
            steps{
                echo 'Setup Virtualenv for testing'
                sh "bash pipelines/PIPELINE-FULL-${ENVIRONMENT}/setup.sh"
            }
        }
        stage('Test'){
        when {
                expression { params.ENVIRONMENT == 'staging' }
            }
            steps{
                echo 'Static program analysis:'
                sh "bash pipelines/PIPELINE-FULL-${ENVIRONMENT}/static_test.sh"
                echo 'Unit testing:'
                sh "bash pipelines/PIPELINE-FULL-${ENVIRONMENT}/unit_test.sh"
            }
            post {
                always {
                    script {
                        def failed = publishCoverage (failUnhealthy: true, 
                            globalThresholds: [[thresholdTarget: 'Line', unhealthyThreshold: 70.0]],
                            adapters: [coberturaAdapter(
                                mergeToOneReport: true, 
                                path: '**/coverage.xml')])
                    }
                    echo "Generating Report"
                    script{ //Publicacion de resultados de prueba estatica
                        def flake8 = scanForIssues tool: flake8(pattern: 'flake8.out')
                        publishIssues issues: [flake8]
                    }
                    echo "Generating Security Report"
                    script{ //Publicacion de resultados de prueba de seguridad
                        def bandit = scanForIssues tool: pyLint(pattern: 'bandit.out')
                        publishIssues issues: [bandit]
                    }
                }
            }
        }
       stage('Build') {
            steps{
                echo 'Package sam application:'
                sh "bash pipelines/common-steps/build.sh"
            }
        }
        stage('Deploy'){
            steps{
                echo 'Initiating Deployment'
                sh "bash pipelines/common-steps/deploy.sh"
            }
        }
        stage('Integration Test after deploy'){
            steps{
                script {
                    def BASE_URL = sh( script: "aws cloudformation describe-stacks --stack-name todo-list-aws-${ENVIRONMENT} --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text",
                        returnStdout: true)
                    echo "$BASE_URL"
                    echo 'Initiating Integration Tests'
                    sh "bash pipelines/common-steps/integration.sh $BASE_URL"
                }
                   
            }
        }
    }
    post { 
        always { 
            echo 'Clean env: delete dir'
            cleanWs()
        }
    }
}